services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: boxing-app-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: boxing_app_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases-prod.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"

  # Backend Service (Express.js)
  backend:
    build:
      context: ./application/muay-thai-ticket-backend
      dockerfile: Dockerfile
    container_name: boxing-app-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: boxing_app_prod
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      PAYMENT_SERVICE_URL: http://payment-service:3000
    volumes:
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"

  # Payment Service API (NestJS)
  payment-service:
    build:
      context: ./application/payment-service
      dockerfile: Dockerfile
    container_name: boxing-app-payment-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: payment_service_prod
      OMISE_PUBLIC_KEY: ${OMISE_PUBLIC_KEY}
      OMISE_SECRET_KEY: ${OMISE_SECRET_KEY}
      OMISE_WEBHOOK_SECRET: ${OMISE_WEBHOOK_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: http://backend:3002
    volumes:
      - ./logs/payment:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"

  # Frontend Application (Next.js)
  frontend:
    build:
      context: ./application/boxing-fight-booking
      dockerfile: Dockerfile
    container_name: boxing-app-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_PAYMENT_SERVICE_URL: ${NEXT_PUBLIC_PAYMENT_SERVICE_URL}
    depends_on:
      - backend
      - payment-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.3"
          memory: "256M"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: boxing-app-nginx-prod
    restart: unless-stopped
    depends_on:
      - payment-service
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "128M"

volumes:
  postgres_data:
